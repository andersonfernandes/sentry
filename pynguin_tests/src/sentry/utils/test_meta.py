# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import meta as module_0


def test_case_0():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    var_0 = meta_0.iter_errors()
    meta_1 = module_0.Meta(var_0, var_0)


def test_case_1():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )


def test_case_2():
    bool_0 = False
    meta_0 = module_0.Meta(bool_0)
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    var_0 = meta_0.enter()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "meta.Meta"


def test_case_3():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    var_0 = meta_0.add_error(meta_0, meta_0)
    var_1 = meta_0.add_error(var_0, data=var_0)


def test_case_4():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    var_0 = meta_0.merge(meta_0)
    var_1 = meta_0.get()
    var_2 = meta_0.raw()


@pytest.mark.xfail(strict=True)
def test_case_5():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    var_0 = meta_0.get_event_errors()
    remark_0 = module_0.Remark()
    var_0.raw()


def test_case_6():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    var_0 = meta_0.create()
    var_1 = meta_0.add_error(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    var_0 = meta_0.add_error(meta_0, meta_0)
    meta_0.add_remark(meta_0)


def test_case_8():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    meta_1 = module_0.Meta(none_type_0, meta_0)
    var_0 = meta_1.get()
    str_0 = "#~8gX/.`"
    dict_0 = {str_0: meta_0}
    remark_0 = module_0.Remark(**dict_0)
    var_1 = meta_0.raw()
    var_2 = remark_0.__iter__()


def test_case_9():
    remark_0 = module_0.Remark()


def test_case_10():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    var_0 = meta_0.add_error(meta_0, data=meta_0)
    var_1 = meta_0.merge(meta_0)


def test_case_11():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    var_0 = meta_0.add_error(meta_0)
    var_1 = meta_0.iter_errors()
    meta_1 = module_0.Meta(meta_0)
    var_2 = meta_0.get_event_errors()


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "<"
    str_1 = 'd#u\rW"?-B/Pbc&?3?'
    dict_0 = {str_0: str_0, str_1: str_0}
    remark_0 = module_0.Remark(**dict_0)
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = meta_0.enter(*str_1)
    assert f"{type(meta_1).__module__}.{type(meta_1).__qualname__}" == "meta.Meta"
    var_0 = meta_0.merge(meta_0)
    var_1 = meta_1.merge(meta_0)
    var_2 = meta_1.add_error(meta_1)
    var_3 = meta_0.iter_errors()
    var_4 = meta_1.add_error(var_2, var_3, var_2)
    meta_2 = module_0.Meta(meta_1)
    var_5 = meta_1.get_event_errors()
    var_6 = meta_1.enter()
    var_7 = var_6.merge(meta_1)
    var_4.merge(meta_2)


@pytest.mark.xfail(strict=True)
def test_case_13():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    bool_0 = True
    float_0 = 2031.64966
    bool_1 = True
    tuple_0 = (bool_0, float_0, bool_1)
    meta_1 = module_0.Meta(path=tuple_0)
    var_0 = meta_1.get()
    var_0.iter_errors()


@pytest.mark.xfail(strict=True)
def test_case_14():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = module_0.Meta()
    var_0 = meta_1.add_error(meta_1)
    var_1 = meta_1.iter_errors()
    var_2 = meta_1.add_error(var_0, var_1, var_0)
    meta_2 = module_0.Meta(meta_1)
    var_3 = meta_1.get_event_errors()
    meta_3 = module_0.Meta()
    var_4 = meta_2.enter(*meta_2)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "meta.Meta"
    var_3.enter(*var_3)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    remark_0 = module_0.Remark(**dict_0)
    meta_0 = module_0.Meta(path=remark_0)
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = module_0.Meta()
    var_0 = meta_0.iter_errors()
    var_1 = meta_1.merge(meta_0)
    var_2 = meta_1.add_error(dict_0, remark_0, dict_0)
    meta_2 = module_0.Meta(meta_1)
    var_3 = meta_1.get_event_errors()
    var_4 = meta_1.enter()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "meta.Meta"
    var_5 = var_4.merge(meta_1)
    meta_1.add_remark(var_1)


def test_case_16():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    var_0 = meta_0.add_error(meta_0)
    var_1 = meta_0.iter_errors()
    var_2 = meta_0.add_error(var_0, var_1, var_0)
    meta_1 = module_0.Meta(meta_0)
    var_3 = meta_0.get_event_errors()


@pytest.mark.xfail(strict=True)
def test_case_17():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = module_0.Meta()
    int_0 = 4709
    var_0 = meta_1.add_error(meta_1)
    list_0 = [meta_1, int_0, meta_1]
    var_1 = meta_1.enter(*list_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "meta.Meta"
    var_2 = meta_1.iter_errors()
    meta_2 = module_0.Meta(meta_1)
    var_3 = var_1.create()
    meta_2.add_error(meta_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    var_0 = meta_0.get()
    str_0 = "d#u\rW\x0c?-B/Pbc&?3?"
    meta_1 = module_0.Meta()
    dict_0 = {str_0: str_0, str_0: str_0}
    remark_0 = module_0.Remark(**dict_0)
    var_1 = meta_1.add_error(meta_1, dict_0)
    meta_2 = module_0.Meta()
    var_2 = meta_1.merge(meta_1)
    var_3 = meta_2.merge(meta_1)
    var_4 = meta_2.add_error(meta_2)
    var_5 = meta_2.add_error(var_4, dict_0, var_4)
    var_6 = meta_2.get_event_errors()
    var_7 = meta_2.enter()
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "meta.Meta"
    var_7.add_remark(var_1)
