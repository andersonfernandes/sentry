# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import meta_typed as module_0


def test_case_0():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = meta_0.add_error(meta_0)
    var_0 = meta_0.merge(meta_0)
    meta_1 = module_0.Meta(path=var_0)


def test_case_1():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )


def test_case_2():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = meta_0.enter()
    assert f"{type(meta_1).__module__}.{type(meta_1).__qualname__}" == "meta_typed.Meta"
    dict_0 = meta_1.create()
    meta_2 = module_0.Meta()


def test_case_3():
    none_type_0 = None
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = meta_0.enter(*list_1)
    assert f"{type(meta_1).__module__}.{type(meta_1).__qualname__}" == "meta_typed.Meta"
    none_type_1 = meta_1.add_error(none_type_0)
    none_type_2 = meta_0.add_error(list_1, list_1, none_type_0)


def test_case_4():
    bytes_0 = b'"\x86b\xb9\x08\xa1\x82v\xe2\xa2\x9f'
    none_type_0 = None
    list_0 = [none_type_0]
    none_type_1 = None
    meta_0 = module_0.Meta(path=none_type_1)
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = meta_0.enter(*list_0)
    assert f"{type(meta_1).__module__}.{type(meta_1).__qualname__}" == "meta_typed.Meta"
    meta_2 = meta_1.enter(*bytes_0)
    iterator_0 = meta_2.iter_errors()


def test_case_5():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    list_0 = meta_0.get_event_errors()


def test_case_6():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = meta_0.add_error(meta_0)
    dict_0 = meta_0.merge(meta_0)


def test_case_7():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    dict_0 = meta_0.create()


def test_case_8():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    list_0 = meta_0.get_event_errors()
    none_type_0 = None
    meta_1 = module_0.Meta(none_type_0, none_type_0)
    meta_2 = meta_1.enter()
    assert f"{type(meta_2).__module__}.{type(meta_2).__qualname__}" == "meta_typed.Meta"
    dict_0 = meta_1.get()
    var_0 = meta_2.merge(meta_0)


def test_case_9():
    str_0 = "pZ"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    meta_0 = module_0.Meta(dict_0, none_type_0)
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = meta_0.enter()
    assert f"{type(meta_1).__module__}.{type(meta_1).__qualname__}" == "meta_typed.Meta"
    meta_2 = meta_1.enter()
    list_0 = meta_2.get_event_errors()
    dict_1 = meta_2.create()
    none_type_1 = None
    meta_3 = module_0.Meta(path=none_type_1)
    meta_4 = meta_3.enter()
    none_type_2 = meta_4.add_error(none_type_1)
    iterator_0 = meta_4.iter_errors()


def test_case_10():
    list_0 = []
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = meta_0.enter(*list_0)
    assert f"{type(meta_1).__module__}.{type(meta_1).__qualname__}" == "meta_typed.Meta"
    none_type_0 = meta_1.add_error(meta_0)
    var_0 = meta_1.merge(meta_1)
    meta_2 = meta_0.enter()
    meta_3 = meta_0.enter(*meta_0)
    assert f"{type(meta_3).__module__}.{type(meta_3).__qualname__}" == "meta_typed.Meta"
    meta_4 = meta_2.enter()
    list_1 = meta_0.get_event_errors()
    meta_5 = meta_4.enter()
    list_2 = meta_5.get_event_errors()
    iterator_0 = meta_4.__iter__()
    meta_6 = meta_2.enter(*meta_4)
    dict_0 = meta_3.get()
    meta_7 = meta_0.enter()
    dict_1 = meta_3.get()
    meta_8 = module_0.Meta(path=meta_0)
    dict_2 = meta_7.raw()


def test_case_11():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = meta_0.add_error(meta_0)
    dict_0 = meta_0.raw()
    none_type_1 = meta_0.add_error(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = meta_0.add_error(meta_0)
    dict_0 = meta_0.raw()
    remark_0 = module_0.Remark()
    meta_0.add_remark(remark_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = meta_0.enter()
    assert f"{type(meta_1).__module__}.{type(meta_1).__qualname__}" == "meta_typed.Meta"
    iterator_0 = meta_0.__iter__()
    iterator_1 = meta_0.__iter__()
    list_0 = [meta_0, meta_0]
    dict_0 = meta_0.create()
    var_0 = meta_0.merge(meta_0)
    meta_2 = meta_1.enter(*iterator_0)
    assert f"{type(meta_2).__module__}.{type(meta_2).__qualname__}" == "meta_typed.Meta"
    list_1 = meta_2.get_event_errors()
    module_0.Remark(*list_0)


def test_case_14():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    dict_0 = meta_0.create()
    dict_1 = meta_0.create()


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = meta_0.enter(*list_0)
    assert f"{type(meta_1).__module__}.{type(meta_1).__qualname__}" == "meta_typed.Meta"
    var_0 = meta_1.merge(meta_0)
    meta_2 = meta_1.enter()
    meta_3 = meta_1.enter(*meta_0)
    assert f"{type(meta_3).__module__}.{type(meta_3).__qualname__}" == "meta_typed.Meta"
    meta_4 = meta_1.enter()
    meta_5 = module_0.Meta(path=meta_3)
    var_1 = meta_5.merge(meta_0)
    meta_6 = module_0.Meta()
    meta_7 = meta_4.enter()
    meta_8 = meta_7.enter()
    none_type_1 = meta_8.add_error(meta_5)
    list_1 = meta_1.get_event_errors()
    meta_5.enter()


@pytest.mark.xfail(strict=True)
def test_case_16():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    iterator_0 = meta_0.__iter__()
    iterator_1 = meta_0.__iter__()
    iterator_2 = meta_0.__iter__()
    dict_0 = meta_0.raw()
    var_0 = meta_0.merge(meta_0)
    meta_1 = meta_0.enter()
    assert f"{type(meta_1).__module__}.{type(meta_1).__qualname__}" == "meta_typed.Meta"
    dict_1 = meta_0.get()
    iterator_3 = meta_0.iter_errors()
    remark_0 = module_0.Remark(*iterator_0)
    dict_2 = meta_0.raw()
    none_type_0 = meta_0.add_error(dict_2, data=dict_2)
    meta_2 = module_0.Meta()
    none_type_1 = meta_2.add_error(dict_1)
    meta_2.add_remark(remark_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    list_0 = []
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = meta_0.enter(*list_0)
    assert f"{type(meta_1).__module__}.{type(meta_1).__qualname__}" == "meta_typed.Meta"
    none_type_0 = meta_1.add_error(meta_0)
    meta_2 = module_0.Meta()
    var_0 = meta_1.merge(meta_1)
    none_type_1 = meta_1.add_error(meta_0, data=var_0)
    meta_3 = meta_2.enter()
    meta_4 = meta_0.enter(*meta_0)
    assert f"{type(meta_4).__module__}.{type(meta_4).__qualname__}" == "meta_typed.Meta"
    meta_5 = meta_3.enter()
    list_1 = meta_0.get_event_errors()
    meta_6 = meta_5.enter()
    list_2 = meta_6.get_event_errors()
    iterator_0 = meta_5.__iter__()
    iterator_1 = meta_2.iter_errors()
    meta_7 = module_0.Meta(none_type_0, none_type_1)
    iterator_2 = meta_6.__iter__()
    remark_0 = module_0.Remark(*list_0)
    meta_4.add_remark(remark_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = meta_0.add_error(meta_0)
    iterator_0 = meta_0.iter_errors()
    none_type_1 = meta_0.add_error(meta_0, iterator_0)
    meta_1 = module_0.Meta()
    var_0 = meta_0.merge(meta_0)
    none_type_2 = meta_1.add_error(meta_0, data=var_0)
    meta_2 = meta_1.enter()
    assert f"{type(meta_2).__module__}.{type(meta_2).__qualname__}" == "meta_typed.Meta"
    meta_3 = meta_0.enter(*meta_0)
    assert f"{type(meta_3).__module__}.{type(meta_3).__qualname__}" == "meta_typed.Meta"
    meta_4 = meta_2.enter()
    list_0 = meta_0.get_event_errors()
    meta_5 = meta_4.enter()
    str_0 = '$>"nw$ydQ\tRnq|_6'
    list_1 = [str_0]
    meta_6 = module_0.Meta(path=list_1)
    list_2 = meta_5.get_event_errors()
    iterator_1 = meta_4.__iter__()
    meta_7 = module_0.Meta()
    iterator_2 = meta_7.iter_errors()
    meta_8 = meta_2.enter(*meta_4)
    dict_0 = meta_5.get()
    meta_9 = meta_1.enter()
    remark_0 = module_0.Remark(**dict_0)
    meta_8.add_remark(remark_0)


def test_case_19():
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = meta_0.add_error(meta_0)
    meta_1 = module_0.Meta()
    dict_0 = meta_1.merge(meta_0)
    none_type_1 = meta_0.add_error(dict_0)


def test_case_20():
    list_0 = []
    meta_0 = module_0.Meta()
    assert (
        f"{type(module_0.Meta.path).__module__}.{type(module_0.Meta.path).__qualname__}"
        == "builtins.property"
    )
    meta_1 = meta_0.enter(*list_0)
    assert f"{type(meta_1).__module__}.{type(meta_1).__qualname__}" == "meta_typed.Meta"
    none_type_0 = meta_1.add_error(meta_0)
    iterator_0 = meta_1.iter_errors()
    var_0 = meta_1.merge(meta_1)
    meta_2 = meta_0.enter()
    meta_3 = meta_0.enter(*meta_0)
    assert f"{type(meta_3).__module__}.{type(meta_3).__qualname__}" == "meta_typed.Meta"
    meta_4 = module_0.Meta(var_0)
    list_1 = meta_0.get_event_errors()
    meta_5 = meta_4.enter()
    list_2 = meta_5.get_event_errors()
    iterator_1 = meta_4.__iter__()
    meta_6 = meta_2.enter(*meta_4)
    dict_0 = meta_3.get()
    meta_7 = meta_0.enter()
    dict_1 = meta_3.get()
    meta_8 = module_0.Meta(path=meta_0)
    dict_2 = meta_7.raw()
