# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import strings as module_0
import base64 as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.truncatechars(none_type_0, none_type_0, none_type_0)
    assert len(module_0.valid_dot_atom_characters) == 82


def test_case_1():
    str_0 = "Emm`*Rm?\n]Z7?"
    var_0 = module_0.truncatechars(str_0, str_0)
    assert var_0 == "Emm`*Rm?\n]Z7?"
    assert len(module_0.valid_dot_atom_characters) == 82


def test_case_2():
    str_0 = "\rfe[w"
    str_1 = module_0.strip(str_0)
    assert str_1 == "fe[w"
    assert len(module_0.valid_dot_atom_characters) == 82


def test_case_3():
    none_type_0 = None
    str_0 = module_0.strip(none_type_0)
    assert str_0 == ""
    assert len(module_0.valid_dot_atom_characters) == 82


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "\r"
    bool_0 = True
    str_1 = module_0.soft_hyphenate(str_0, bool_0)
    assert str_1 == "\r"
    assert len(module_0.valid_dot_atom_characters) == 82
    codec_info_0 = module_0.codec_lookup(str_0)
    assert (
        f"{type(codec_info_0).__module__}.{type(codec_info_0).__qualname__}"
        == "codecs.CodecInfo"
    )
    assert len(codec_info_0) == 4
    bool_1 = False
    module_0.soft_hyphenate(codec_info_0, bool_1)


def test_case_5():
    str_0 = "WLvAnI"
    bool_0 = module_0.is_valid_dot_atom(str_0)
    assert bool_0 is True
    assert len(module_0.valid_dot_atom_characters) == 82


def test_case_6():
    str_0 = "NBvzQXUJif$QD`Yv"
    codec_info_0 = module_0.codec_lookup(str_0)
    assert (
        f"{type(codec_info_0).__module__}.{type(codec_info_0).__qualname__}"
        == "codecs.CodecInfo"
    )
    assert len(codec_info_0) == 4
    assert len(module_0.valid_dot_atom_characters) == 82


def test_case_7():
    none_type_0 = None
    codec_info_0 = module_0.codec_lookup(none_type_0)
    assert (
        f"{type(codec_info_0).__module__}.{type(codec_info_0).__qualname__}"
        == "codecs.CodecInfo"
    )
    assert len(codec_info_0) == 4
    assert len(module_0.valid_dot_atom_characters) == 82


def test_case_8():
    list_0 = []
    str_0 = module_0.oxfordize_list(list_0)
    assert str_0 == ""
    assert len(module_0.valid_dot_atom_characters) == 82


def test_case_9():
    str_0 = "wb"
    str_1 = "CT\r\x0be`W2a4"
    list_0 = [str_0, str_1, str_1]
    str_2 = module_0.oxfordize_list(list_0)
    assert str_2 == "wb, CT\r\x0be`W2a4, and CT\r\x0be`W2a4"
    assert len(module_0.valid_dot_atom_characters) == 82


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    module_0.unescape_string(bool_0)


def test_case_11():
    str_0 = "-&\r92fJ3j"
    str_1 = module_0.strip_lone_surrogates(str_0)
    assert str_1 == "-&\r92fJ3j"
    assert len(module_0.valid_dot_atom_characters) == 82


def test_case_12():
    bytes_0 = b"t"
    str_0 = module_0.compress(bytes_0)
    assert str_0 == "eJwrAQAAdQB1"
    assert len(module_0.valid_dot_atom_characters) == 82


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "ylH"
    module_0.decompress(str_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    module_0.soft_hyphenate(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "%/[z_)\r1~"
    module_0.soft_break(str_0, str_0)


def test_case_16():
    str_0 = "RZCRjDhMK>%=btfall"
    int_0 = module_0.count_sprintf_parameters(str_0)
    assert int_0 == 0
    assert len(module_0.valid_dot_atom_characters) == 82


def test_case_17():
    str_0 = ",DA9x8"
    str_1 = module_0.to_single_line_str(str_0)
    assert str_1 == ",DA9x8"
    assert len(module_0.valid_dot_atom_characters) == 82


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "pearson_r_coefficient"
    int_0 = module_0.count_sprintf_parameters(str_0)
    assert int_0 == 0
    assert len(module_0.valid_dot_atom_characters) == 82
    str_1 = module_0.to_single_line_str(str_0)
    none_type_0 = None
    module_0.truncatechars(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = ""
    bool_0 = False
    var_0 = module_0.truncatechars(str_0, bool_0)
    assert var_0 == ""
    assert len(module_0.valid_dot_atom_characters) == 82
    str_1 = "~p[k,,vesk%qG9\\m3kP"
    str_2 = module_0.oxfordize_list(str_1)
    assert str_2 == "~, p, [, k, ,, ,, v, e, s, k, %, q, G, 9, \\, m, 3, k, and P"
    bool_1 = True
    module_0.oxfordize_list(bool_1)


def test_case_20():
    str_0 = "$;%-l"
    str_1 = "SXX>r@(*ao"
    list_0 = [str_1]
    str_2 = module_0.oxfordize_list(list_0)
    assert str_2 == "SXX>r@(*ao"
    assert len(module_0.valid_dot_atom_characters) == 82
    str_3 = module_0.strip_lone_surrogates(str_0)
    assert str_3 == "$;%-l"


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = "%Q]J,^O-%9Bn"
    str_1 = "1mlTMk;=|S"
    str_2 = "E\x0bR"
    list_0 = [str_1, str_2]
    str_3 = module_0.oxfordize_list(list_0)
    assert str_3 == "1mlTMk;=|S and E\x0bR"
    assert len(module_0.valid_dot_atom_characters) == 82
    module_0.codec_lookup(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = "N\t%<{0_;:f,H&\n"
    str_1 = module_0.soft_break(str_0, str_0)
    assert str_1 == "N\t%<{0_;:f,H&\n"
    assert len(module_0.valid_dot_atom_characters) == 82
    bool_0 = False
    int_0 = module_0.count_sprintf_parameters(str_0)
    assert int_0 == 0
    str_2 = module_0.soft_break(str_1, str_1)
    var_0 = module_0.truncatechars(str_0, int_0)
    assert var_0 == "..."
    int_1 = module_0.count_sprintf_parameters(var_0)
    assert int_1 == 0
    module_1.standard_b64encode(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = ".new"
    str_1 = ":yX#)[?"
    codec_info_0 = module_0.codec_lookup(str_1)
    assert (
        f"{type(codec_info_0).__module__}.{type(codec_info_0).__qualname__}"
        == "codecs.CodecInfo"
    )
    assert len(codec_info_0) == 4
    assert len(module_0.valid_dot_atom_characters) == 82
    bool_0 = module_0.is_valid_dot_atom(str_0)
    assert bool_0 is False
    none_type_0 = None
    codec_info_0.visit_MatchStar(none_type_0)


def test_case_24():
    none_type_0 = None
    bool_0 = module_0.is_valid_dot_atom(none_type_0)
    assert bool_0 is False
    assert len(module_0.valid_dot_atom_characters) == 82


def test_case_25():
    str_0 = "undefined"
    codec_info_0 = module_0.codec_lookup(str_0, str_0)
    assert (
        f"{type(codec_info_0).__module__}.{type(codec_info_0).__qualname__}"
        == "codecs.CodecInfo"
    )
    assert len(codec_info_0) == 4
    assert len(module_0.valid_dot_atom_characters) == 82


def test_case_26():
    str_0 = "ascii"
    codec_info_0 = module_0.codec_lookup(str_0, str_0)
    assert (
        f"{type(codec_info_0).__module__}.{type(codec_info_0).__qualname__}"
        == "codecs.CodecInfo"
    )
    assert len(codec_info_0) == 4
    assert len(module_0.valid_dot_atom_characters) == 82


def test_case_27():
    bytes_0 = b"\x8aY"
    str_0 = module_0.to_unicode(bytes_0)
    assert str_0 == "(Error decoding value)"
    assert len(module_0.valid_dot_atom_characters) == 82


@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = "/_.\x0czU~tf"
    str_1 = module_0.strip_lone_surrogates(str_0)
    assert str_1 == "/_.\x0czU~tf"
    assert len(module_0.valid_dot_atom_characters) == 82
    str_2 = module_0.strip_lone_surrogates(str_0)
    str_3 = module_0.to_unicode(str_1)
    int_0 = module_0.count_sprintf_parameters(str_0)
    assert int_0 == 0
    bool_0 = True
    str_4 = "+]X"
    bool_1 = module_0.is_valid_dot_atom(str_4)
    assert bool_1 is False
    str_5 = module_0.soft_hyphenate(str_0, bool_0)
    assert str_5 == "/\xad_\xad.\xad\x0c\xadz\xadU\xad~\xadt\xadf"
    str_6 = "N<aG"
    str_7 = module_0.strip(str_0)
    assert str_7 == "/_.\x0czU~tf"
    none_type_0 = None
    codec_info_0 = module_0.codec_lookup(none_type_0)
    assert (
        f"{type(codec_info_0).__module__}.{type(codec_info_0).__qualname__}"
        == "codecs.CodecInfo"
    )
    assert len(codec_info_0) == 4
    var_0 = codec_info_0.__repr__()
    bytes_0 = b"\xdcD/\x9d\x07"
    str_8 = module_0.compress(bytes_0)
    assert str_8 == "eJy746I/lx0ABy8B9A=="
    str_9 = module_0.to_unicode(str_7)
    assert str_9 == "/_.\x0czU~tf"
    var_1 = module_0.truncatechars(str_4, str_6)
    assert var_1 == "+]X"
    int_1 = 1030
    var_2 = module_0.truncatechars(str_2, int_1, codec_info_0)
    assert var_2 == "/_.\x0czU~tf"
    bytes_1 = b"0"
    str_10 = module_0.compress(bytes_1)
    str_11 = "ascii"
    codec_info_1 = module_0.codec_lookup(str_11)
    str_12 = '"rHJK&?O:{)ECj5{PFu'
    str_13 = module_0.soft_break(str_12, int_0)
    assert str_13 == '"rHJK&?\u200bO:{)\u200bECj5{\u200bPFu'
    str_14 = module_0.to_unicode(var_2)
    var_0.decode(str_8, str_4)


@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = "ascii"
    str_1 = module_0.strip(str_0)
    assert str_1 == "ascii"
    assert len(module_0.valid_dot_atom_characters) == 82
    str_2 = "/_.\x0czU~tf"
    str_3 = "ignoreCase"
    str_4 = module_0.strip_lone_surrogates(str_3)
    assert str_4 == "ignoreCase"
    str_5 = module_0.strip_lone_surrogates(str_2)
    str_6 = module_0.to_unicode(str_3)
    int_0 = module_0.count_sprintf_parameters(str_2)
    assert int_0 == 0
    bool_0 = False
    str_7 = "stRh3y\n/x`@\r\rLi3~8K."
    bool_1 = module_0.is_valid_dot_atom(str_7)
    assert bool_1 is False
    module_0.soft_hyphenate(str_2, bool_0)
